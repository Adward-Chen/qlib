---
description: 开发环境设置
globs: 
alwaysApply: false
---
# Qlib 开发工作流指南

## 开发环境设置

### 环境准备
1. 使用 Conda 创建 Python 环境（推荐 Python 3.8+）
2. 克隆项目：`git clone https://github.com/microsoft/qlib.git`
3. 安装依赖：`pip install -e .` 或参考 [setup.py](mdc:setup.py)
4. 安装开发依赖：查看 [pyproject.toml](mdc:pyproject.toml) 中的可选依赖

### IDE 配置
- 配置 Python 解释器指向虚拟环境
- 启用 MyPy 类型检查：使用 [.mypy.ini](mdc:.mypy.ini) 配置
- 安装 Pylint：使用 [.pylintrc](mdc:.pylintrc) 配置
- 配置 Pre-commit hooks：[.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)

## 常用开发任务

### 构建和安装
```bash
# 从源码安装
pip install -e .

# 构建 Docker 镜像
bash build_docker_image.sh

# 使用 Makefile 进行构建
make install
```

### 运行测试
```bash
# 运行所有测试
pytest tests/

# 运行特定模块测试
pytest tests/test_data.py

# 运行覆盖率测试
pytest --cov=qlib tests/
```

### 代码质量检查
```bash
# Pylint 检查
pylint qlib/

# MyPy 类型检查
mypy qlib/

# 格式化代码
black qlib/

# Pre-commit hooks
pre-commit run --all-files
```

## 新功能开发流程

### 1. 数据处理功能
- 在 [qlib/data/](mdc:qlib/data) 中添加新的数据处理器
- 实现标准的数据接口
- 添加数据验证逻辑
- 编写相应的测试

### 2. 机器学习模型
- 在 [qlib/model/](mdc:qlib/model) 中实现新模型
- 继承基础模型类
- 实现 `fit`, `predict`, `save`, `load` 方法
- 添加模型配置和超参数

### 3. 交易策略
- 在 [qlib/strategy/](mdc:qlib/strategy) 中实现策略
- 继承基础策略类
- 实现信号生成逻辑
- 考虑风险管理和位置调整

### 4. 回测工具
- 使用 [qlib/backtest/](mdc:qlib/backtest) 框架
- 定义回测配置
- 实现性能指标计算
- 生成分析报告

## 工作流集成

### 使用 Workflow 模块
- [qlib/workflow/](mdc:qlib/workflow) 提供完整的工作流管理
- 配置数据处理、模型训练、回测的端到端流程
- 支持实验跟踪和结果管理

### 配置管理
- 使用 [qlib/config.py](mdc:qlib/config.py) 进行全局配置
- 常量定义在 [qlib/constant.py](mdc:qlib/constant.py)
- 支持环境变量和配置文件

## 调试和日志

### 日志系统
- 使用 [qlib/log.py](mdc:qlib/log.py) 中的日志功能
- 设置适当的日志级别
- 在关键位置添加调试信息

### 常见问题解决
1. **数据问题**：检查数据格式和时间范围
2. **模型问题**：验证输入特征和模型参数
3. **性能问题**：使用性能分析工具
4. **内存问题**：监控内存使用，优化数据加载

## 贡献代码

### 代码审查清单
- [ ] 代码符合 PEP 8 标准
- [ ] 通过所有测试
- [ ] 添加了适当的文档
- [ ] 更新了相关示例
- [ ] 考虑了向后兼容性

### 提交流程
1. 创建功能分支
2. 实现功能并测试
3. 提交代码到分支
4. 创建 Pull Request
5. 代码审查和合并

## 性能优化

### Cython 扩展
- 查看 [setup.py](mdc:setup.py) 中的 Cython 模块
- 为计算密集型操作编写 Cython 扩展
- 使用 NumPy 数组进行高效计算

### 并行化
- 使用多进程处理大规模数据
- 利用 GPU 加速深度学习模型
- 实现批处理和流处理

## 部署和发布

### 本地部署
- 使用 [Dockerfile](mdc:Dockerfile) 构建容器
- 配置生产环境参数
- 监控系统性能

### 在线服务
- 实现模型在线预测接口
- 设置自动化模型更新
- 配置监控和告警系统

## 社区贡献

### 贡献模块
- [qlib/contrib/](mdc:qlib/contrib) 包含社区贡献
- 参考现有贡献模式
- 提供清晰的文档和示例

### 学习资源
- 查看 [examples/](mdc:examples) 中的示例
- 阅读 [docs/](mdc:docs) 中的文档
- 参考 [README.md](mdc:README.md) 了解项目概况

